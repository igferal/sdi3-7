//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// Este código fuente fue generado automáticamente por wsdl, Versión=4.6.1055.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="EjbSeatServiceServiceSoapBinding", Namespace="http://impl.business.sdi.com/")]
public partial class EjbSeatServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback moveToExcludedOperationCompleted;
    
    private System.Threading.SendOrPostCallback moveSeatToExcludedOperationCompleted;
    
    private System.Threading.SendOrPostCallback findOperationCompleted;
    
    private System.Threading.SendOrPostCallback moveToAcceptedOperationCompleted;
    
    private System.Threading.SendOrPostCallback findByUserAndNotExcludedAndOpenTripOperationCompleted;
    
    private System.Threading.SendOrPostCallback moveToPendingOperationCompleted;
    
    /// <remarks/>
    public EjbSeatServiceService() {
        this.Url = "http://DESKTOP-74U6TKG:8280/sdi3-7.EJB/SeatService";
    }
    
    /// <remarks/>
    public event moveToExcludedCompletedEventHandler moveToExcludedCompleted;
    
    /// <remarks/>
    public event moveSeatToExcludedCompletedEventHandler moveSeatToExcludedCompleted;
    
    /// <remarks/>
    public event findCompletedEventHandler findCompleted;
    
    /// <remarks/>
    public event moveToAcceptedCompletedEventHandler moveToAcceptedCompleted;
    
    /// <remarks/>
    public event findByUserAndNotExcludedAndOpenTripCompletedEventHandler findByUserAndNotExcludedAndOpenTripCompleted;
    
    /// <remarks/>
    public event moveToPendingCompletedEventHandler moveToPendingCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void moveToExcluded([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg0Specified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg1Specified) {
        this.Invoke("moveToExcluded", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmoveToExcluded(long arg0, bool arg0Specified, long arg1, bool arg1Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("moveToExcluded", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmoveToExcluded(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void moveToExcludedAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified) {
        this.moveToExcludedAsync(arg0, arg0Specified, arg1, arg1Specified, null);
    }
    
    /// <remarks/>
    public void moveToExcludedAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified, object userState) {
        if ((this.moveToExcludedOperationCompleted == null)) {
            this.moveToExcludedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveToExcludedOperationCompleted);
        }
        this.InvokeAsync("moveToExcluded", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, this.moveToExcludedOperationCompleted, userState);
    }
    
    private void OnmoveToExcludedOperationCompleted(object arg) {
        if ((this.moveToExcludedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.moveToExcludedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void moveSeatToExcluded([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] seat arg0) {
        this.Invoke("moveSeatToExcluded", new object[] {
                    arg0});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmoveSeatToExcluded(seat arg0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("moveSeatToExcluded", new object[] {
                    arg0}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmoveSeatToExcluded(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void moveSeatToExcludedAsync(seat arg0) {
        this.moveSeatToExcludedAsync(arg0, null);
    }
    
    /// <remarks/>
    public void moveSeatToExcludedAsync(seat arg0, object userState) {
        if ((this.moveSeatToExcludedOperationCompleted == null)) {
            this.moveSeatToExcludedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveSeatToExcludedOperationCompleted);
        }
        this.InvokeAsync("moveSeatToExcluded", new object[] {
                    arg0}, this.moveSeatToExcludedOperationCompleted, userState);
    }
    
    private void OnmoveSeatToExcludedOperationCompleted(object arg) {
        if ((this.moveSeatToExcludedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.moveSeatToExcludedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public seat find([System.Xml.Serialization.XmlElementAttribute("arg0", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long[] arg0) {
        object[] results = this.Invoke("find", new object[] {
                    arg0});
        return ((seat)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult Beginfind(long[] arg0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("find", new object[] {
                    arg0}, callback, asyncState);
    }
    
    /// <remarks/>
    public seat Endfind(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((seat)(results[0]));
    }
    
    /// <remarks/>
    public void findAsync(long[] arg0) {
        this.findAsync(arg0, null);
    }
    
    /// <remarks/>
    public void findAsync(long[] arg0, object userState) {
        if ((this.findOperationCompleted == null)) {
            this.findOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindOperationCompleted);
        }
        this.InvokeAsync("find", new object[] {
                    arg0}, this.findOperationCompleted, userState);
    }
    
    private void OnfindOperationCompleted(object arg) {
        if ((this.findCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.findCompleted(this, new findCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void moveToAccepted([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg0Specified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg1Specified) {
        this.Invoke("moveToAccepted", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmoveToAccepted(long arg0, bool arg0Specified, long arg1, bool arg1Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("moveToAccepted", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmoveToAccepted(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void moveToAcceptedAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified) {
        this.moveToAcceptedAsync(arg0, arg0Specified, arg1, arg1Specified, null);
    }
    
    /// <remarks/>
    public void moveToAcceptedAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified, object userState) {
        if ((this.moveToAcceptedOperationCompleted == null)) {
            this.moveToAcceptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveToAcceptedOperationCompleted);
        }
        this.InvokeAsync("moveToAccepted", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, this.moveToAcceptedOperationCompleted, userState);
    }
    
    private void OnmoveToAcceptedOperationCompleted(object arg) {
        if ((this.moveToAcceptedCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.moveToAcceptedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public seat[] findByUserAndNotExcludedAndOpenTrip([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg0Specified) {
        object[] results = this.Invoke("findByUserAndNotExcludedAndOpenTrip", new object[] {
                    arg0,
                    arg0Specified});
        return ((seat[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginfindByUserAndNotExcludedAndOpenTrip(long arg0, bool arg0Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("findByUserAndNotExcludedAndOpenTrip", new object[] {
                    arg0,
                    arg0Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public seat[] EndfindByUserAndNotExcludedAndOpenTrip(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((seat[])(results[0]));
    }
    
    /// <remarks/>
    public void findByUserAndNotExcludedAndOpenTripAsync(long arg0, bool arg0Specified) {
        this.findByUserAndNotExcludedAndOpenTripAsync(arg0, arg0Specified, null);
    }
    
    /// <remarks/>
    public void findByUserAndNotExcludedAndOpenTripAsync(long arg0, bool arg0Specified, object userState) {
        if ((this.findByUserAndNotExcludedAndOpenTripOperationCompleted == null)) {
            this.findByUserAndNotExcludedAndOpenTripOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindByUserAndNotExcludedAndOpenTripOperationCompleted);
        }
        this.InvokeAsync("findByUserAndNotExcludedAndOpenTrip", new object[] {
                    arg0,
                    arg0Specified}, this.findByUserAndNotExcludedAndOpenTripOperationCompleted, userState);
    }
    
    private void OnfindByUserAndNotExcludedAndOpenTripOperationCompleted(object arg) {
        if ((this.findByUserAndNotExcludedAndOpenTripCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.findByUserAndNotExcludedAndOpenTripCompleted(this, new findByUserAndNotExcludedAndOpenTripCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://impl.business.sdi.com/", ResponseNamespace="http://impl.business.sdi.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void moveToPending([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg0, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg0Specified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long arg1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool arg1Specified) {
        this.Invoke("moveToPending", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmoveToPending(long arg0, bool arg0Specified, long arg1, bool arg1Specified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("moveToPending", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmoveToPending(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void moveToPendingAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified) {
        this.moveToPendingAsync(arg0, arg0Specified, arg1, arg1Specified, null);
    }
    
    /// <remarks/>
    public void moveToPendingAsync(long arg0, bool arg0Specified, long arg1, bool arg1Specified, object userState) {
        if ((this.moveToPendingOperationCompleted == null)) {
            this.moveToPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveToPendingOperationCompleted);
        }
        this.InvokeAsync("moveToPending", new object[] {
                    arg0,
                    arg0Specified,
                    arg1,
                    arg1Specified}, this.moveToPendingOperationCompleted, userState);
    }
    
    private void OnmoveToPendingOperationCompleted(object arg) {
        if ((this.moveToPendingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.moveToPendingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <comentarios/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://impl.business.sdi.com/")]
public partial class seat {
    
    private string commentField;
    
    private seatStatus statusField;
    
    private bool statusFieldSpecified;
    
    private long tripIdField;
    
    private bool tripIdFieldSpecified;
    
    private long userIdField;
    
    private bool userIdFieldSpecified;
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string comment {
        get {
            return this.commentField;
        }
        set {
            this.commentField = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public seatStatus status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool statusSpecified {
        get {
            return this.statusFieldSpecified;
        }
        set {
            this.statusFieldSpecified = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public long tripId {
        get {
            return this.tripIdField;
        }
        set {
            this.tripIdField = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool tripIdSpecified {
        get {
            return this.tripIdFieldSpecified;
        }
        set {
            this.tripIdFieldSpecified = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public long userId {
        get {
            return this.userIdField;
        }
        set {
            this.userIdField = value;
        }
    }
    
    /// <comentarios/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool userIdSpecified {
        get {
            return this.userIdFieldSpecified;
        }
        set {
            this.userIdFieldSpecified = value;
        }
    }
}

/// <comentarios/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://impl.business.sdi.com/")]
public enum seatStatus {
    
    /// <comentarios/>
    ACCEPTED,
    
    /// <comentarios/>
    EXCLUDED,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void moveToExcludedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void moveSeatToExcludedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void findCompletedEventHandler(object sender, findCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class findCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal findCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public seat Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((seat)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void moveToAcceptedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void findByUserAndNotExcludedAndOpenTripCompletedEventHandler(object sender, findByUserAndNotExcludedAndOpenTripCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class findByUserAndNotExcludedAndOpenTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal findByUserAndNotExcludedAndOpenTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public seat[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((seat[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
public delegate void moveToPendingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
